//
//  NemoClient.h
//  Nemo
//
//  Created by lafengnan on 13-12-22.
//  Copyright (c) 2013å¹´ panzhongbin@gmail.com. All rights reserved.
//

#import <Foundation/Foundation.h>

@class NemoContainer, NemoObject;

@interface NemoClient : AFHTTPSessionManager

#pragma mark - Properties

@property (nonatomic, retain) NSString *userName;          // User name of Nemo
@property (nonatomic, retain) NSString *passWord;          // Password of the user
@property (nonatomic, retain) NSURL *authUrl;              // The authentication URL
@property (nonatomic, retain) NSString *authToken;         // Authentication token generated by user and password
@property (nonatomic) BOOL authenticated;                  // Set to YES when client get authenticated
@property (nonatomic) BOOL isServiceable;                  // Set to YES if swift service is available
@property (nonatomic, retain) NSString *storageUrl;        // Storage url get from authentication = proxyUrl/v1/account
@property (nonatomic, retain) NSHTTPURLResponse *response; // Response from swift-backend
@property (nonatomic, retain) NSMutableArray *containerList; // Stores container list of account

@property (nonatomic,weak) id delegate;

#pragma mark - Class method

+ (id)getClient;

#pragma mark - Constructors


/** Create a singleton client for NemoClient **/
+ (void)initialize;

/** Create a Nemo Client with specified user and password
 *  @param url The URL to use for authentication
 *  @param user Your user name
 *  @param passwd Your password associated with the user
 */
- (id)initWithAuthURL:(NSURL *)url User:(NSString *)user withPassword:(NSString *)passwd;

#pragma mark - Authentication

/** Authentication shoud run in sync mode, otherwise the auth token would not be get
 *  while login view changes to table view
 */
- (void)authentication:(NSString *)authType success:(void (^)(UIViewController *vc))successHandler failure:(void (^)(UIViewController *vc, NSError *err))failHandler;
- (void)getTempAuth:(void (^)(UIViewController *vc))success failure:(void (^)(UIViewController *vc, NSError *err))fail;

/** Set HTTP header before send request
 *  @param headerDict stores the header keys and values
 */
- (void)setHttpHeader:(NSDictionary *)headerDict;


#pragma mark - Container Operations

/** Get container list in the account
 *  @param successHandler executes if successful
 *  @param failureHandler exectues if failed
 */
- (void)nemoGetAccount:(void (^)(NSArray *containers, NSError *jsonError))success failure:(void (^)(NSURLSessionDataTask *task, NSError *error))failure ;

/** Get container meta data in the container
 *  @param containerName passes which container will be HEAD
 *  @param successHandler executes if successful
 *  @param failureHandler executes if failed
 */
- (void)nemoHeadContainer:(NemoContainer *)container success:(void (^)(NemoContainer *container, NSError *jsonError))success failure:(void (^)(NSURLSessionTask *task, NSError *error))failure;

/** Get container data in the container
 *  @param containerName passes which container will be GET
 *  @param successHandler executes if successful
 *  @param failureHandler executes if failed
 */
- (void)nemoGETContainer:(NemoContainer *)container withQueryString:(NSDictionary *)queryString success:(void (^)(NemoContainer *container, NSError *jsonError))success failure:(void (^)(NSURLSessionTask *task, NSError *error))failure;

/** Put a new container into the account
 *  @param newContainer the container to add
 *  @param successHandler executes if successful
 *  @param failureHandler executes if failed
 */
- (void)nemoPutContainer:(NemoContainer *)newContainer success:(void (^)(NemoContainer *newContainer, NSError *error))successHandler failure:(void (^)(NSURLSessionTask *task, NSError *error))failureHandler;

/** Delete container of the specified container
 *  @param container the container to delete
 *  @param successHandler executes if successful
 *  @param failureHandler executes if failed
 */
- (void)nemoDeleteContainer:(NemoContainer *)container success:(void (^)(NemoContainer *container, NSError *jsonError))successHandler failure:(void (^)(NSURLSessionTask *task, NSError *error))failureHandler;



#pragma mark - Object Operations


/** Delete Object of the sepcified object
 *  @param object the object to delete
 *  @param container the container which contains the object
 *  @param successHandler executes if successful
 *  @param failureHandler executes if failed
 */

- (void)nemoDELETEObject:(NemoObject *)object fromContainer:(NemoContainer *)container success:(void (^)(NemoContainer *container, NemoObject *object, NSError *error))successHandler failure:(void (^)(NSURLSessionTask *task, NSError *error))failureHandler;

/** GET Object of the specified object
 *  @param object the object to get
 *  @param container the container which contains the object
 *  @param successHandler executes if successufl
 *  @param failuerHandler executes if failed
 */

- (void)nemoGETObject:(NemoObject *)object fromContainer:(NemoContainer *)container success:(void (^)(NemoContainer *container, NemoObject * obj, NSError *error))successHandler failuer:(void (^)(NSURLSessionTask *task, NSError *error))failureHandler;

/** PUT object of the specified object
 *  @param object the object to put
 *  @param container the container where to put the object
 *  @param successHandler executes if successful
 *  @param failuerHandler executes if failed
 */

- (void)nemoPUTObject:(NemoObject *)object toContainer:(NemoContainer *)container success:(void (^)(NemoContainer *container, NemoObject *obj, NSError *error))successHandler failuer:(void (^)(NSURLSessionTask *task, NSError *error))failuerHandler;

/** HEAD object of the specified object
 *  @param object the object to HEAD
 *  @param container the container which contains the object
 *  @param successHandler executes if successful
 *  @param failuerHandler executes if failed
 */

- (void)nemoHEADObject:(NemoObject *)object fromContainer:(NemoContainer *)container success:(void (^)(NemoContainer *container, NemoObject *object, NSError *error))successHandler failuer:(void (^)(NSURLSessionTask *task, NSError *error))failureHandler;

 

#pragma mark - 

- (void)displayClientInfo;

@end
